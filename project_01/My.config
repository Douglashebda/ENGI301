# -*- conf -*-
# Some annotated BeagleG sample configuration file.
# Adapt to your own needs.
# You can configure logical axes X, Y, Z, E, A, B, C, U, V, W
# Pass to machine-control with -c <config-file> option.
##

[ General ]
# Homing order. For 3D printers, you'd probably home Z last, while CNC machines
# typically home Z first.
#home-order        = X
#require-homing    = yes  # Require homing (G28) is executed before first move.
#range-check       = no  # Check that axes are within range. Dangerous if no.


# It is possible to clamp movements that would leave the machine cube to
# range; that way the range-check will not trigger for them, but movements don't
# will not end up where they were intended to be in that case, so configure
# with care. Typically it makes most sense in 2.5D applications where the
# Z-axis is less important. Thus this feature is limited to the Z-axis
#clamp-to-range    = Z

auto-motor-disable-seconds = 120  # Switch off motors after 2min of inactivity.

# -- Logical axis configuration

[ X-Axis ]
# The step motor has 200 full steps per turn. We do 32x microstepping
# One turn of a gear moves the toothed belt 60mm. The configuration understands
# a simple division expression:
steps-per-mm     = 1600
max-feedrate     = 800   # mm/s
max-acceleration = 800  # mm/s^2
range            = 435   # mm - the travel of this axis
#home-pos         = min   # This is where the home switch is. At min position.

[ Y-Axis ]
# Another example: each turn moves the ACME screw 1/4 inch on 8x microstepping
steps-per-mm     = 1600
max-feedrate     = 800  # mm/s
max-acceleration = 800  # mm/s^2
range            = 170  # mm
# home-pos         = min
 
[ Z-Axis ]
# Our Z-axis; here, our screw only moves 2mm per turn.
steps-per-mm     = 1600
max-feedrate     =   800  # mm/s  - our Z-axis is not very fast.
max-acceleration =  800  # mm/s^2
range            = 50  # mm
# home-pos         = max  # For CNC machines, that typically would be max on Z

# Hardware mapping; which axes and switches are connected to which logical units.

[ Motor-Mapping ]
# If you don't happen to have a motor-mapping section, motors are assigned
# for the configured axis above in sequence XYZEABCUVW
motor_1 = axis:-x   # X axis connected to motor 1
# We double up the y axis by connecting it to two motor driver, 2 and 3.
# One of it shall be mirrored.
motor_2 = axis:y
motor_3 = axis:-z

[ Switch-Mapping ]
# These switches trigger on high: when activated, they generate a pos level.
switch_1 = active:high min_x
#switch_2 = active:high min_y
#switch_3 = active:high min_z

# You can have multiple switches wired together in case you only have a limited
# number of inputs or want to simplify wiring (put them electrically in series
# or parallel to get a logical 'or' to reach the switching level if either
# of these trigger). It is probably a good idea to have home-switches independent
# of each other, while lumping together all the limit switches (only used for
# exceptions anyway) can simplify wiring.
#switch_4 = active:high max_y max_y

# An example of a switch that triggers on low.
# switch_5 = active:low max_z

# In the beagleg-pin-mapping.h, additional AUX pins are chosen that can
# be connected to various functions here. Valid logical names are one of
# mist, flood, vacuum, spindle, spindle-speed, spindle-dir, cooler, case-lights,
# fan, hotend, heatedbed, led, atx-power, estop.
# All of these can be GCode controlled with various G or M codes (See G-code.md).
# [ Aux-Mapping ]
# aux_1 = mist
# aux_2 = flood
# aux_3 = spindle
# aux_12 = atx-power

# Some of these functions make more sense with an analog output via pulse
# width modulation (PWM) instead of a switching AUX output.
# [ PWM-Mapping ]
# pwm_1 = spindle-speed

